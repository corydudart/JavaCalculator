/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package calculator;

import java.awt.event.KeyEvent;

/**
 *
 * @author Cory Dudart & Shaun Lohues
 */
public class Calculator extends javax.swing.JFrame {

    private float memory;
    private Programmers frame2;

    /**
     * Creates new form Calculator
     */
    public Calculator() {
        initComponents();
    }

    public void equals() {
        float answer;
        String temp = jTotal.getText();
        jTotal.setText(temp + jText.getText());
        jText.setText("0");
        if (jTotal.getText().contains("+")) {
            String parts[] = jTotal.getText().split("\\+");
            answer = Float.parseFloat(parts[0]) + Float.parseFloat(parts[1]);

            if (Math.floor(answer) == answer) {
                jText.setText(Integer.toString((int) answer));
            } else {
                jText.setText(Float.toString(answer));
            }

            jTotal.setText("");
            jText.grabFocus();
        } else if (jTotal.getText().contains("*")) {
            String parts[] = jTotal.getText().split("\\*");
            answer = Float.parseFloat(parts[0]) * Float.parseFloat(parts[1]);
            if (Math.floor(answer) == answer) {
                jText.setText(Integer.toString((int) answer));
            } else {
                jText.setText(Float.toString(answer));
            }
            jTotal.setText("");
            jText.grabFocus();
        } else if (jTotal.getText().contains("/")) {
            String parts[] = jTotal.getText().split("\\/");
            answer = Float.parseFloat(parts[0]) / Float.parseFloat(parts[1]);
            if (Math.floor(answer) == answer) {
                jText.setText(Integer.toString((int) answer));
            } else {
                jText.setText(Float.toString(answer));
            }
            jTotal.setText("");
            jText.grabFocus();
        } else if (jTotal.getText().contains("-")) {
            String parts[] = jTotal.getText().split("\\-");
            answer = Float.parseFloat(parts[0]) - Float.parseFloat(parts[1]);
            if (Math.floor(answer) == answer) {
                jText.setText(Integer.toString((int) answer));
            } else {
                jText.setText(Float.toString(answer));
            }
            jTotal.setText("");
            jText.grabFocus();
        }

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        jScrollPane1 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        jButton1 = new javax.swing.JButton();
        mMinus = new javax.swing.JButton();
        mPlus = new javax.swing.JButton();
        mS = new javax.swing.JButton();
        mR = new javax.swing.JButton();
        mC = new javax.swing.JButton();
        back = new javax.swing.JButton();
        cE = new javax.swing.JButton();
        C = new javax.swing.JButton();
        plusMinus = new javax.swing.JButton();
        sqrRoot = new javax.swing.JButton();
        seven = new javax.swing.JButton();
        eight = new javax.swing.JButton();
        nine = new javax.swing.JButton();
        divide = new javax.swing.JButton();
        percent = new javax.swing.JButton();
        four = new javax.swing.JButton();
        five = new javax.swing.JButton();
        six = new javax.swing.JButton();
        star = new javax.swing.JButton();
        oneDivX = new javax.swing.JButton();
        one = new javax.swing.JButton();
        two = new javax.swing.JButton();
        three = new javax.swing.JButton();
        minus = new javax.swing.JButton();
        equals = new javax.swing.JButton();
        zero = new javax.swing.JButton();
        decimal = new javax.swing.JButton();
        plus = new javax.swing.JButton();
        jTotal = new javax.swing.JLabel();
        jText = new javax.swing.JTextField();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        jMenuItem1 = new javax.swing.JMenuItem();
        jMenuItem2 = new javax.swing.JMenuItem();
        jMenu2 = new javax.swing.JMenu();
        jMenu3 = new javax.swing.JMenu();

        jTextArea1.setColumns(20);
        jTextArea1.setRows(5);
        jScrollPane1.setViewportView(jTextArea1);

        jButton1.setText("jButton1");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Standard");
        setPreferredSize(new java.awt.Dimension(300, 500));
        getContentPane().setLayout(new java.awt.GridBagLayout());

        mMinus.setText("M-");
        mMinus.setMargin(null);
        mMinus.setMaximumSize(null);
        mMinus.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mMinusActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.gridheight = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 0, 2);
        getContentPane().add(mMinus, gridBagConstraints);

        mPlus.setText("M+");
        mPlus.setMargin(null);
        mPlus.setMaximumSize(null);
        mPlus.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mPlusActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.gridheight = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 0, 2);
        getContentPane().add(mPlus, gridBagConstraints);

        mS.setText("MS");
        mS.setMargin(null);
        mS.setMaximumSize(null);
        mS.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mSActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.gridheight = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 0, 2);
        getContentPane().add(mS, gridBagConstraints);

        mR.setText("MR");
        mR.setMargin(null);
        mR.setMaximumSize(null);
        mR.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mRActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.gridheight = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 0, 2);
        getContentPane().add(mR, gridBagConstraints);

        mC.setText("MC");
        mC.setMargin(null);
        mC.setMaximumSize(null);
        mC.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mCActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.gridheight = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 0, 2);
        getContentPane().add(mC, gridBagConstraints);

        back.setText("‚Üê");
        back.setMargin(null);
        back.setMaximumSize(null);
        back.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.gridheight = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 0, 2);
        getContentPane().add(back, gridBagConstraints);

        cE.setText("CE");
        cE.setMargin(null);
        cE.setMaximumSize(null);
        cE.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cEActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.gridheight = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 0, 2);
        getContentPane().add(cE, gridBagConstraints);

        C.setText("C");
        C.setMargin(null);
        C.setMaximumSize(null);
        C.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.gridheight = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 0, 2);
        getContentPane().add(C, gridBagConstraints);

        plusMinus.setText("¬±");
        plusMinus.setMargin(null);
        plusMinus.setMaximumSize(null);
        plusMinus.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                plusMinusActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.gridheight = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 0, 2);
        getContentPane().add(plusMinus, gridBagConstraints);

        sqrRoot.setText("‚àö");
        sqrRoot.setMargin(null);
        sqrRoot.setMaximumSize(null);
        sqrRoot.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sqrRootActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.gridheight = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 0, 2);
        getContentPane().add(sqrRoot, gridBagConstraints);

        seven.setText("7");
        seven.setMargin(null);
        seven.setMaximumSize(null);
        seven.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sevenActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 7;
        gridBagConstraints.gridheight = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 0, 2);
        getContentPane().add(seven, gridBagConstraints);

        eight.setText("8");
        eight.setMargin(null);
        eight.setMaximumSize(null);
        eight.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                eightActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 7;
        gridBagConstraints.gridheight = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 0, 2);
        getContentPane().add(eight, gridBagConstraints);

        nine.setText("9");
        nine.setMargin(null);
        nine.setMaximumSize(null);
        nine.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nineActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 7;
        gridBagConstraints.gridheight = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 0, 2);
        getContentPane().add(nine, gridBagConstraints);

        divide.setText("/");
        divide.setMargin(null);
        divide.setMaximumSize(null);
        divide.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                divideActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 7;
        gridBagConstraints.gridheight = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 0, 2);
        getContentPane().add(divide, gridBagConstraints);

        percent.setText("%");
        percent.setMargin(null);
        percent.setMaximumSize(null);
        percent.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                percentActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 7;
        gridBagConstraints.gridheight = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 0, 2);
        getContentPane().add(percent, gridBagConstraints);

        four.setText("4");
        four.setMargin(null);
        four.setMaximumSize(null);
        four.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fourActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 9;
        gridBagConstraints.gridheight = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 0, 2);
        getContentPane().add(four, gridBagConstraints);

        five.setText("5");
        five.setMargin(null);
        five.setMaximumSize(null);
        five.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fiveActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 9;
        gridBagConstraints.gridheight = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 0, 2);
        getContentPane().add(five, gridBagConstraints);

        six.setText("6");
        six.setMargin(null);
        six.setMaximumSize(null);
        six.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sixActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 9;
        gridBagConstraints.gridheight = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 0, 2);
        getContentPane().add(six, gridBagConstraints);

        star.setText("*");
        star.setMargin(null);
        star.setMaximumSize(null);
        star.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                starActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 9;
        gridBagConstraints.gridheight = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 0, 2);
        getContentPane().add(star, gridBagConstraints);

        oneDivX.setText("1/x");
        oneDivX.setMargin(null);
        oneDivX.setMaximumSize(null);
        oneDivX.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                oneDivXActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 9;
        gridBagConstraints.gridheight = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 0, 2);
        getContentPane().add(oneDivX, gridBagConstraints);

        one.setText("1");
        one.setMargin(null);
        one.setMaximumSize(null);
        one.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                oneActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 11;
        gridBagConstraints.gridheight = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 0, 2);
        getContentPane().add(one, gridBagConstraints);

        two.setText("2");
        two.setMargin(null);
        two.setMaximumSize(null);
        two.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                twoActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 11;
        gridBagConstraints.gridheight = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 0, 2);
        getContentPane().add(two, gridBagConstraints);

        three.setText("3");
        three.setMargin(null);
        three.setMaximumSize(null);
        three.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                threeActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 11;
        gridBagConstraints.gridheight = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 0, 2);
        getContentPane().add(three, gridBagConstraints);

        minus.setText("-");
        minus.setMargin(null);
        minus.setMaximumSize(null);
        minus.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                minusActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 11;
        gridBagConstraints.gridheight = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 0, 2);
        getContentPane().add(minus, gridBagConstraints);

        equals.setText("=");
        equals.setMargin(null);
        equals.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                equalsActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 11;
        gridBagConstraints.gridheight = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 0, 2);
        getContentPane().add(equals, gridBagConstraints);

        zero.setText("0");
        zero.setMargin(null);
        zero.setMaximumSize(null);
        zero.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                zeroActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 13;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.gridheight = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 0, 2);
        getContentPane().add(zero, gridBagConstraints);

        decimal.setText(".");
        decimal.setMargin(null);
        decimal.setMaximumSize(null);
        decimal.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                decimalActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 13;
        gridBagConstraints.gridheight = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 0, 2);
        getContentPane().add(decimal, gridBagConstraints);

        plus.setText("+");
        plus.setMargin(null);
        plus.setMaximumSize(null);
        plus.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                plusActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 13;
        gridBagConstraints.gridheight = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 0, 2);
        getContentPane().add(plus, gridBagConstraints);

        jTotal.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        jTotal.setFocusable(false);
        jTotal.setHorizontalTextPosition(javax.swing.SwingConstants.RIGHT);
        jTotal.setVerifyInputWhenFocusTarget(false);
        jTotal.setVerticalTextPosition(javax.swing.SwingConstants.TOP);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 5;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        getContentPane().add(jTotal, gridBagConstraints);

        jText.setEditable(false);
        jText.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jText.setHorizontalAlignment(javax.swing.JTextField.TRAILING);
        jText.setText("0");
        jText.setToolTipText("");
        jText.setCursor(new java.awt.Cursor(java.awt.Cursor.TEXT_CURSOR));
        jText.setMargin(new java.awt.Insets(25, 2, 25, 2));
        jText.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jTextKeyPressed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 5;
        gridBagConstraints.gridheight = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        getContentPane().add(jText, gridBagConstraints);

        jMenu1.setText("View");

        jMenuItem1.setText("Programmers");
        jMenuItem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem1ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem1);

        jMenuItem2.setText("Exit");
        jMenuItem2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem2ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem2);

        jMenuBar1.add(jMenu1);

        jMenu2.setText("Edit");
        jMenuBar1.add(jMenu2);

        jMenu3.setText("Help");
        jMenuBar1.add(jMenu3);

        setJMenuBar(jMenuBar1);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void oneActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_oneActionPerformed

        if (jText.getText().equals("0")) {
            jText.setText("1");
            jText.grabFocus();
        } else {
            String Temp = jText.getText() + "1";
            jText.setText(Temp);
            jText.grabFocus();
        }
    }//GEN-LAST:event_oneActionPerformed

    private void twoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_twoActionPerformed
        if (jText.getText().equals("0")) {
            jText.setText("2");
            jText.grabFocus();
        } else {
            String Temp = jText.getText() + "2";
            jText.setText(Temp);
            jText.grabFocus();
        }
    }//GEN-LAST:event_twoActionPerformed

    private void threeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_threeActionPerformed
        if (jText.getText().equals("0")) {
            jText.setText("3");
            jText.grabFocus();
        } else {
            String Temp = jText.getText() + "3";
            jText.setText(Temp);
            jText.grabFocus();
        }
    }//GEN-LAST:event_threeActionPerformed

    private void fourActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fourActionPerformed
        if (jText.getText().equals("0")) {
            jText.setText("4");
            jText.grabFocus();
        } else {
            String Temp = jText.getText() + "4";
            jText.setText(Temp);
            jText.grabFocus();
        }
    }//GEN-LAST:event_fourActionPerformed

    private void fiveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fiveActionPerformed
        if (jText.getText().equals("0")) {
            jText.setText("5");
            jText.grabFocus();
        } else {
            String Temp = jText.getText() + "5";
            jText.setText(Temp);
            jText.grabFocus();
        }
    }//GEN-LAST:event_fiveActionPerformed

    private void sixActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sixActionPerformed
        if (jText.getText().equals("0")) {
            jText.setText("6");
            jText.grabFocus();
        } else {
            String Temp = jText.getText() + "6";
            jText.setText(Temp);
            jText.grabFocus();
        }
    }//GEN-LAST:event_sixActionPerformed

    private void sevenActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sevenActionPerformed
        if (jText.getText().equals("0")) {
            jText.setText("7");
            jText.grabFocus();
        } else {
            String Temp = jText.getText() + "7";
            jText.setText(Temp);
            jText.grabFocus();
        }
    }//GEN-LAST:event_sevenActionPerformed

    private void eightActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_eightActionPerformed
        if (jText.getText().equals("0")) {
            jText.setText("8");
            jText.grabFocus();
        } else {
            String Temp = jText.getText() + "8";
            jText.setText(Temp);
            jText.grabFocus();
        }
    }//GEN-LAST:event_eightActionPerformed

    private void nineActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_nineActionPerformed
        if (jText.getText().equals("0")) {
            jText.setText("9");
            jText.grabFocus();
        } else {
            String Temp = jText.getText() + "9";
            jText.setText(Temp);
            jText.grabFocus();
        }
    }//GEN-LAST:event_nineActionPerformed

    private void plusActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_plusActionPerformed
        if (jTotal.getText().equals("")) {
            jTotal.setText(jText.getText() + "+");
            jText.setText("0");
            jText.grabFocus();
        } else {
            equals();
            String temp = jTotal.getText();
            jTotal.setText(temp + jText.getText() + "+");
            jText.setText("0");
            jText.grabFocus();
        }
    }//GEN-LAST:event_plusActionPerformed

    private void sqrRootActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sqrRootActionPerformed
        String temp = jText.getText();
        float sqrt = (float) Math.sqrt(Float.parseFloat(temp));
        jText.setText(Float.toString(sqrt));
        jText.grabFocus();
    }//GEN-LAST:event_sqrRootActionPerformed

    private void percentActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_percentActionPerformed
        float answer;
        float per;
        String temp = jTotal.getText();
        jTotal.setText(temp + jText.getText());
        jText.setText("0");

        if (jTotal.getText().contains("+")) {
            String parts[] = jTotal.getText().split("\\+");
            per = (Float.parseFloat(parts[1]) / 100) * (Float.parseFloat(parts[0]));
            answer = Float.parseFloat(parts[0]) + per;
            jText.setText(Float.toString(answer));
            jTotal.setText("");
            jText.grabFocus();
        } else if (jTotal.getText().contains("-")) {
            String parts[] = jTotal.getText().split("\\-");
            per = (Float.parseFloat(parts[1]) / 100) * (Float.parseFloat(parts[0]));
            answer = Float.parseFloat(parts[0]) - per;
            jText.setText(Float.toString(answer));
            jTotal.setText("");
            jText.grabFocus();
        } else if (jTotal.getText().contains("*")) {
            String parts[] = jTotal.getText().split("\\*");
            per = (Float.parseFloat(parts[1]) / 100) * (Float.parseFloat(parts[0]));
            answer = Float.parseFloat(parts[0]) * per;
            jText.setText(Float.toString(answer));
            jTotal.setText("");
            jText.grabFocus();
        } else if (jTotal.getText().contains("/")) {
            String parts[] = jTotal.getText().split("\\/");
            per = (Float.parseFloat(parts[1]) / 100) * (Float.parseFloat(parts[0]));
            answer = Float.parseFloat(parts[0]) / per;
            jText.setText(Float.toString(answer));
            jTotal.setText("");
            jText.grabFocus();
        }
    }//GEN-LAST:event_percentActionPerformed

    private void zeroActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_zeroActionPerformed
        if (jText.getText().equals("0")) {
            jText.setText("0");
            jText.grabFocus();
        } else {
            String Temp = jText.getText() + "0";
            jText.setText(Temp);
            jText.grabFocus();
        }
    }//GEN-LAST:event_zeroActionPerformed

    private void equalsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_equalsActionPerformed
        equals();
    }//GEN-LAST:event_equalsActionPerformed

    private void CActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CActionPerformed
        jText.setText("0");
        jTotal.setText("");
        jText.grabFocus();
    }//GEN-LAST:event_CActionPerformed

    private void cEActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cEActionPerformed
        jText.setText("0");
        jText.grabFocus();
    }//GEN-LAST:event_cEActionPerformed

    private void minusActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_minusActionPerformed

        if (jTotal.getText().equals("")) {
            jTotal.setText(jText.getText() + "-");
            jText.setText("0");
            jText.grabFocus();

        } else {
            equals();
            String temp = jTotal.getText();
            jTotal.setText(temp + jText.getText() + "-");
            jText.setText("0");
            jText.grabFocus();
        }
    }//GEN-LAST:event_minusActionPerformed

    private void decimalActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_decimalActionPerformed
        if (jText.getText().contains(".")) {
            String Temp = jText.getText();
            jText.setText(Temp);
            jText.grabFocus();
        } else {
            String Temp = jText.getText() + ".";
            jText.setText(Temp);
            jText.grabFocus();
        }
    }//GEN-LAST:event_decimalActionPerformed

    private void starActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_starActionPerformed
        float answer;
        if (jTotal.getText().equals("")) {
            jTotal.setText(jText.getText() + "*");
            jText.setText("0");
            jText.grabFocus();
        } else {
            equals();
            String temp = jTotal.getText();
            jTotal.setText(temp + jText.getText() + "*");
            jText.setText("0");
            jText.grabFocus();
        }
    }//GEN-LAST:event_starActionPerformed

    private void jTextKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextKeyPressed
        int keyCode = evt.getKeyCode();
        if (keyCode == KeyEvent.VK_ENTER) {
            equals.doClick();
        } else if (keyCode == KeyEvent.VK_MULTIPLY) {
            star.doClick();
        } else if (keyCode == KeyEvent.VK_NUMPAD1) {
            one.doClick();
        } else if (keyCode == KeyEvent.VK_NUMPAD2) {
            two.doClick();
        } else if (keyCode == KeyEvent.VK_NUMPAD3) {
            three.doClick();
        } else if (keyCode == KeyEvent.VK_NUMPAD4) {
            four.doClick();
        } else if (keyCode == KeyEvent.VK_NUMPAD5) {
            five.doClick();
        } else if (keyCode == KeyEvent.VK_NUMPAD6) {
            six.doClick();
        } else if (keyCode == KeyEvent.VK_NUMPAD7) {
            seven.doClick();
        } else if (keyCode == KeyEvent.VK_NUMPAD8) {
            eight.doClick();
        } else if (keyCode == KeyEvent.VK_NUMPAD9) {
            nine.doClick();
        } else if (keyCode == KeyEvent.VK_NUMPAD0) {
            zero.doClick();
        } else if (keyCode == KeyEvent.VK_ADD) {
            plus.doClick();
        } else if (keyCode == KeyEvent.VK_DECIMAL) {
            decimal.doClick();
        } else if (keyCode == KeyEvent.VK_SUBTRACT) {
            minus.doClick();
        } else if (keyCode == KeyEvent.VK_DIVIDE) {
            divide.doClick();
        } else if (keyCode == KeyEvent.VK_BACK_SPACE) {
            back.doClick();
        }
    }//GEN-LAST:event_jTextKeyPressed

    private void divideActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_divideActionPerformed
        float answer;
        if (jTotal.getText().equals("")) {
            jTotal.setText(jText.getText() + "/");
            jText.setText("0");
            jText.grabFocus();
        } else {
            equals();
            String temp = jTotal.getText();
            jTotal.setText(temp + jText.getText() + "/");
            jText.setText("0");
            jText.grabFocus();
        }
    }//GEN-LAST:event_divideActionPerformed

    private void backActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backActionPerformed
        if (jText.getText().length() == 1) {
            jText.setText("0");
        } else {
            jText.setText(jText.getText().substring(0, jText.getText().length() - 1));
            jText.grabFocus();
        }
    }//GEN-LAST:event_backActionPerformed

    private void mCActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mCActionPerformed
        memory = 0;
        jText.grabFocus();
    }//GEN-LAST:event_mCActionPerformed

    private void mRActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mRActionPerformed
        jText.setText(Float.toString(memory));
        jText.grabFocus();
    }//GEN-LAST:event_mRActionPerformed

    private void mSActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mSActionPerformed
        memory = Float.parseFloat(jText.getText());
        jText.setText("0");
        jText.grabFocus();
    }//GEN-LAST:event_mSActionPerformed

    private void mPlusActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mPlusActionPerformed
        memory += Float.parseFloat(jText.getText());
        jText.grabFocus();
    }//GEN-LAST:event_mPlusActionPerformed

    private void mMinusActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mMinusActionPerformed
        memory -= Float.parseFloat(jText.getText());
        jText.grabFocus();
    }//GEN-LAST:event_mMinusActionPerformed

    private void plusMinusActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_plusMinusActionPerformed
        float temp = (Float.parseFloat(jText.getText()));
        temp = -temp;
        jText.setText(Float.toString(temp));
    }//GEN-LAST:event_plusMinusActionPerformed

    private void oneDivXActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_oneDivXActionPerformed
        float temp = (Float.parseFloat(jText.getText()));
        temp = 1 / temp;
        jText.setText(Float.toString(temp));
    }//GEN-LAST:event_oneDivXActionPerformed

    private void jMenuItem2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem2ActionPerformed
        System.exit(0);
    }//GEN-LAST:event_jMenuItem2ActionPerformed

    private void jMenuItem1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem1ActionPerformed
        if (frame2 == null) {
            frame2 = new Programmers();
        }

        setVisible(false);
        frame2.setVisible(true);

    }//GEN-LAST:event_jMenuItem1ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /*
         * Set the Nimbus look and feel
         */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /*
         * If Nimbus (introduced in Java SE 6) is not available, stay with the
         * default look and feel. For details see
         * http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Calculator.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Calculator.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Calculator.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Calculator.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /*
         * Create and display the form
         */
        java.awt.EventQueue.invokeLater(new Runnable() {

            public void run() {
                new Calculator().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton C;
    private javax.swing.JButton back;
    private javax.swing.JButton cE;
    private javax.swing.JButton decimal;
    private javax.swing.JButton divide;
    private javax.swing.JButton eight;
    private javax.swing.JButton equals;
    private javax.swing.JButton five;
    private javax.swing.JButton four;
    private javax.swing.JButton jButton1;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenu jMenu3;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JMenuItem jMenuItem2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextField jText;
    private javax.swing.JTextArea jTextArea1;
    private javax.swing.JLabel jTotal;
    private javax.swing.JButton mC;
    private javax.swing.JButton mMinus;
    private javax.swing.JButton mPlus;
    private javax.swing.JButton mR;
    private javax.swing.JButton mS;
    private javax.swing.JButton minus;
    private javax.swing.JButton nine;
    private javax.swing.JButton one;
    private javax.swing.JButton oneDivX;
    private javax.swing.JButton percent;
    private javax.swing.JButton plus;
    private javax.swing.JButton plusMinus;
    private javax.swing.JButton seven;
    private javax.swing.JButton six;
    private javax.swing.JButton sqrRoot;
    private javax.swing.JButton star;
    private javax.swing.JButton three;
    private javax.swing.JButton two;
    private javax.swing.JButton zero;
    // End of variables declaration//GEN-END:variables
}
